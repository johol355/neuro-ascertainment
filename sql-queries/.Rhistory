getwd()
quarto use template compies/quarto-letter
devtools::install_github('ryanfalckjones/rcmswe')
rcmswe::extract_comorbs()
%>%
rcmswe::extract_comorbs
library(rcmswe)
extract_comorbs()
devtools::install_github('ryanfalckjones/rcmswe')
devtools::install_github('ryanfalckjones/rcmswe')
?extract_comorbs
?extract_comorbidities
?rcmswe::extract_comorbs
rcmswe::extract_comorbs
library(DBI)
library(RSQLite)
library(tidyverse)
dbConnect(SQLite, '~/Local Documents/GitHub/Nationwide_SAH/db.sqlite') -> db
dbConnect(SQLite, '~/Local Documents/GitHub/Nationwide_SAH/db.sqlite') -> db
dbConnect(SQLite(), '~/Local Documents/GitHub/Nationwide_SAH/db.sqlite', extended_types = T) -> db
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql', "SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';")))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), "SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';")))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), "SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), "SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), " SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), " SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), " SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
View(asah)
asah %>% group_by(CONT_ICU_ID) %>% filter(n() >1)
asah %>% group_by(CONT_ICU_ID) %>% filter(n() >1) %>% arrange(LopNr)
asah %>% group_by(CONT_ICU_ID) %>% filter(n() >1) %>% arrange(LopNr) %>% view()
asah %>% summarise(across(everything(), ~sum(.)))
asah %>% group_by(LopNr) %>% summarise(across(sex_female:age, ~sum(.)))
asah %>% group_by(LopNr) %>% summarise(across(sex_female:age, ~sum)
)
asah %>% group_by(LopNr) %>% summarise(across(sex_female:age, sum)
)
asah %>% group_by(LopNr) %>% summarise(across(VtfId_LopNr, ~min(.), sex_female:age, sum))
asah %>% group_by(LopNr) %>% summarise(across(VtfId_LopNr, NULL))
asah %>% group_by(LopNr) %>% summarise(across(VtfId_LopNr, first))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), " SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), " SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
asah %>% group_by(LopNr, DX_ORDER) %>% filter(n() >1)
asah %>% group_by(LopNr, DX_ORDER) %>% filter(n() >1) %>% arrange(LopNr)
asah %>% group_by(LopNr) %>% filter(n() >1) %>% arrange(LopNr)
asah %>% group_by(LopNr) %>% filter(n() >1) %>% arrange(LopNr) %>% view()
asah <- dbGetQuery(db, paste(read_file('~/Local Documents/R/neuro-ascertainment/candidate-queries/hospital-admission-concept/hospital-admission-concept.sql'), " SELECT * FROM SUMMARY_TABLE WHERE DX_GROUP LIKE '%ASAH%';"))
asah
summary_table <- asah
asah %>% lazy_dt() %>% as_tibble()
# Post-processing of SIR-data to be able to combine multiple separated ICU-admissions
# into a single coherent ICU-admission
library(tidyverse)
library(DBI)
asah %>% lazy_dt() %>% as_tibble()
?lazy_dt()
??lazy_dt()
# Post-processing of SIR-data to be able to combine multiple separated ICU-admissions
# into a single coherent ICU-admission
library(tidyverse)
library(dtplyr)
asah %>% lazy_dt() %>% as_tibble()
summary_table %>%
lazy_dt() %>%
group_by(VtfId_LopNr) %>%
summarise(across(sir_adm_time, ~min(.)))
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(sir_adm_time, ~min(.)))
summary_functions <- list(sir_adm_time ~ first(),
sir_dsc_time ~ last())
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(c(sir_adm_time, sir_dsc_time), summary_functions))
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(c(sir_adm_time, sir_dsc_time), .fns = summary_functions))
summary_functions <- list(sir_adm_time = first,
sir_dsc_time = last)
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(c(sir_adm_time, sir_dsc_time), .fns = summary_functions))
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(c(sir_adm_time, sir_dsc_time), summary_functions))
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(c(sir_adm_time, sir_dsc_time), summary_functions(.x)))
summary_functions <- list(sir_adm_time ~ first(.),
sir_dsc_time ~ last(.))
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(c(sir_adm_time, sir_dsc_time), summary_functions(.x)))
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
pivot_longer()
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
pivot_longer(everything())
summary_table %>%
lazy_dt() %>%
group_by(CONT_ICU_ID) %>%
summarise(across(c(par_adm_date, sir_adm_time), first))
summary_table %>%
group_by(CONT_ICU_ID) %>%
tibble(
summarise(across(c(par_adm_date, sir_adm_time), first)),
summarise(across(c(par_dsc_date, sir_dsc_time), last)))
?map2
vars <- c('par_adm_date',
'sir_adm_date')
funs <- list(first, last)
map2(vars, funs, function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
vars <- c('par_adm_date',
'sir_adm_time')
funs <- list(first, last)
map2(vars, funs, function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
map2(vars, list(first,last), function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
vars <- c('par_adm_date',
'sir_adm_time')
funs <- list(first, last)
map2(vars, funs, function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
map2(c('par_adm_date',
'sir_adm_time'), funs, function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
map2(c('par_adm_date',
'sir_adm_time'), list(first, last), function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
map2(c('par_adm_date',
'sir_adm_time'), list(first, last), function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
map2(c('par_adm_date','sir_adm_time'),
list(list(first = first), list(last = last)),
function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
})
map2(c('par_adm_date','sir_adm_time'),
list(list(first = first), list(last = last)),
function(var, fun){
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(var), fun))
}) %>%
reduce(full_join)
?imap
map(c('par_adm_date','sir_adm_time'),
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(.x), first))
)
map(c('par_adm_date','sir_adm_time'),
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(.), first))
)
map(c('par_adm_date','sir_adm_time'),
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(.x), ~first(.)))
)
map(c('par_adm_date','sir_adm_time'),
summary_table %>%
group_by(CONT_ICU_ID) %>%
summarise(across(all_of(.), ~first(.)))
)
?map2
?mapply(function, ...)
?map
summary_table %>%
group_by(CONT_ICU_ID) %>%
select(CONT_ICU_ID, sir_adm_time) %>%
group_map(~summarise(across(., first)))
summary_table %>%
group_by(CONT_ICU_ID) %>%
select(CONT_ICU_ID, sir_adm_time) %>%
group_map(~summarise(across(.x, first)))
read_csv('/Volumes/projects/IVA nyckel/NIVA_MASTER/NIVA_MASTER_IDs_key.csv') -> key
readr::read_csv('/Volumes/projects/IVA nyckel/NIVA_MASTER/NIVA_MASTER_IDs_key.csv') -> key
key
key %>% group_by(VtfId_LopNr) %>% filter(n() >1)
library(tidyverse)
key %>% group_by(VtfId_LopNr) %>% filter(n() >1)
key %>% select(VtfId_LopNr, PatientID) group_by(VtfId_LopNr) %>% filter(n() >1)
key %>% select(VtfId_LopNr, PatientID) %>% group_by(VtfId_LopNr) %>% filter(n() >1)
key %>% select(VtfId_LopNr, PatientID) %>% group_by(VtfId_LopNr) %>% filter(n() >1) %>% distinct()
db <- DBI::dbConnect(RSQLite::SQLite(), '~/Local Documents/GitHub/Nationwide_SAH/db.sqlite', extended_types = T)
setwd('~/Local Documents/R/neuro-ascertainment/sql-queries/')
source('build_query.R')
query <- build_query('general_cte.sql','SELECT * FROM T_ID_KEYS;')
library(DBI)
dbGetQuery(db, query)
dbGetQuery(db, query) %>% arrange(LopNr, CONT_HADM_ID, CONT_ICU_ID, VtfId_LopNr)
library(tidyverse)
dbGetQuery(db, query) %>% arrange(LopNr, CONT_HADM_ID, CONT_ICU_ID, VtfId_LopNr)
query <- build_query('general_cte.sql','SELECT * FROM PAR_HADM_CONT_DATES;')
dbGetQuery(db, query)
query <- build_query('general_cte.sql','SELECT PAR_HADM_CONT_DATES.*, PAR_HADM.Sjukhus FROM PAR_HADM_CONT_DATES LEFT JOIN PAR_HADM;')
dbGetQuery(db, query)
query <- build_query('general_cte.sql','SELECT C.*, PAR_HADM.Sjukhus FROM PAR_HADM_CONT_DATES C LEFT JOIN PAR_HADM ON C.HADM_ID = PAR_HADM.HADM_ID LIMIT 1000;')
dbGetQuery(db, query)
dbGetQuery(db, query) %>% group_by(CONT_HADM_ID) %>% filter(n() >1)
